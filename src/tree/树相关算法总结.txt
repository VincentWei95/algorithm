一、树算法经常遇到的几个概念：高度、深度、层

1、节点的高度：节点到叶子节点的最长路径（边数）
2、节点的深度：根节点到这个节点所经历的边的个数
3、节点的层数：节点的深度+1
4、树的高度：根节点的高度

对上面的概念用一个图解释会比较明白：

                    高度      深度      层
        A       ->   3        0        1
      /   \
     B     C    ->   2        1        2
    / \   / \
   D   E F   G  ->   1        2        3
  / \       /
 H   I     J    ->   0        3        4

用现实生活类比上面的图：
"高度"这个概念就是从下往上度量，比如我们要度量第10层楼的高度、第13层楼的高度，起点都是地面。树这种数据结构的高度也是一样，从最底层开始计数，并且起点是0
"深度"这个概念就是从上往下度量，比如水中鱼的深度，是从水平面开始度量的。树这种数据结构也是类似，从根节点开始度量，并且起点是0
"层数"跟深度的计算类似，不过计数的起点是1，也就是说根节点位于第1层

注：当遇到与"深度"、"高度"有关的题型时，使用dfs深度优先搜索即使用前、中、后序遍历；遇到"层次"有关的题型时，使用bfs广度优先搜索

二、常见二叉树的概念

1、满二叉树：叶子节点全部都在最底层，除了叶子节点之外，每个节点都有左右两个子节点，这种二叉树就叫满二叉树
2、完全二叉树：叶子节点都在最底下两层，最后一层叶子节点都靠左排列，并且除了最后一层，其他层的节点个数都要达到最大，这种二叉树叫做完全二叉树
3、二叉搜索树：在树中的任意一个节点，其左子树中的每个节点的值，都要小于这个节点的值，而右子树节点的值都大于这个节点的值（结合中序遍历可输出有序的数据序列）
4、平衡二叉树：一棵二叉树是平衡二叉树，当且仅当所有子树也都是平衡二叉树

三、递归的方法论

前序遍历（中左右）：5 4 1 2 6 7 8
中序遍历（左中右）：1 4 2 5 7 6 8
后序遍历（左右中）：1 2 4 7 8 6 5

        5
       / \
      4   6
     / \ / \
    1  2 7  8

编写递归算法按以下三个步骤：
1、确定递归函数的参数和返回值
2、确定递归终止条件
3、确定单层递归的逻辑

以前序遍历为例子：
1、确定递归函数的参数和返回值：
因为前中后序遍历最终只需要输出List<Integer>列表，同时需要操作二叉树
所以递归函数需要有两个参数 List<Integer> 和 TreeNode 根节点
最终是返回存储了二叉树节点的列表，所以不需要返回值 void

2、确定递归终止条件
递归停止的时候就是节点为 null 的时候

3、确定单层递归的逻辑（其实就是在确认了使用前/中/后序遍历后，上面提到的 "中" 的处理逻辑）
假设题目是前序遍历，所以在单层递归的逻辑，是要先取中节点的数值
list.add(root.val)
recursive(root.left) // 继续遍历左子树
recursive(root.right) // 继续遍历右子树

（一）递归函数什么时候要有返回值？
1、如果需要搜索整棵二叉树且不用处理递归返回值，递归函数就不要返回值
2、如果需要搜索整棵二叉树且需要处理递归返回值，递归函数就需要返回值
3、如果要搜索其中一条符合条件的路径，那么递归一定需要返回值，因为遇到符合条件就要及时返回

（二）递归时回溯的处理
当题目中有涉及到回溯时，需要切记：递归和回溯是一一对应的，有递归就必须要有回溯，不能拆开！

以列表访问整棵树的节点举例：

// 前提条件：需要做回溯的题目，在递归就不要传空节点处理了，在递归前先处理 root == null 的情况
public void traversal(TreeNode root, List<Integer> list) {
    list.add(root.val);
    // 假设题目条件是在叶子节点处理一些事情
    if (root.left == null && root.right == null) {
        // ...
        return;
    }

    // 递归和回溯是必须在一起的
    if (root.left != null) {
        traversal(root.left, list); // 递归
        list.remove(list.size() - 1); // 回溯
    }
    if (root.right != null) {
        traversal(root.right, list); // 递归
        list.remove(list.size() - 1); // 回溯
    }
}

四、层序遍历的模板

public void levelOrder(TreeNode root) {
    Queue<TreeNode> queue = new LinkedList<>();
    queue.add(root);
    while (!queue.isEmpty()) {
        int size = queue.size();
        for (int i = 0; i < size; i++) {
            TreeNode node = queue.poll();
            // 题目要求处理，如存储每一层的元素等
            ...
            if (node.left != null) {
                queue.add(node.left);
            }
            if (node.right != null) {
                queue.add(node.right);
            }
        }
    }
}

五、二叉搜索树题型解题技巧

遇到二叉搜索树的题目时，需要能想到几个解题技巧：
1、二叉搜索树是有序的
2、中序遍历
3、用一个变量TreeNode prev 记录上一次递归搜索的节点，用于前后节点对比

六、二叉树题目选择什么遍历顺序

1、涉及到二叉树的构造，无论普通二叉树还是二叉搜索树一定是前序，都是先构造中节点
2、求普通二叉树的属性，一般是后序，一般要通过递归函数的返回值做计算
3、求二叉搜索树的属性，一定是中序了，因为二叉搜索树是有序的