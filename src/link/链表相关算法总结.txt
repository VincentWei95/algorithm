一、链表代码编写技巧：
1、写链表代码要多画图，画出操作前和操作后的结果指针指向，将更多的脑容量留给逻辑思考
2、考虑边界条件，写完所有逻辑时，举例验证代码是否有问题：
（1）链表为空时，代码是否运行正常
（2）链表只有一个节点时，是否正常
（3）链表只有两个节点时，是否正常
（4）处理头节点和尾节点时，是否正常
（5）不同题目的特定处理是否正常
3、利用哨兵简化实现难度
4、多写多练，没有捷径

二、常用的解决链表问题方式
1、快慢指针：自己维护两个链表节点 quick 和 slow，快指针走两步，慢指针走一步。常用于链表相交、检测链表是否有环、获取链表中间位置等题目
2、哨兵链表节点：自己创建一个哨兵 dummyHead 节点，简化链表实现

三、链表常考的经典面试题型
1、单链表的反转（定义双指针prev和cur，先拿出cur.next，cur.next=prev将下个指向指到前一个节点，prev=cur前一个节点向后走一步，cur=next当前节点走到下个节点，直到cur==null）
2、链表中环的检测（快慢指针）
3、两个有序的链表合并（同时遍历两个链表）
4、删除链表倒数第n个节点
5、求链表的中间节点（快指针走两步，慢指针走一步，快指针走完时，慢指针的位置就是中间位置）

链表代码编写步骤：
1、先判断传入的参数是否为null的边界条件处理
2、链表代码一般都会需要循环遍历，思考确认循环结束条件
3、如果有要求返回最终链表整体的输出结果，一般都会定义哨兵dummyHead，最终结果返回dummyHead.next

不干扰原始链表的操作：
ListNode cur = head; // 定义一个变量指向head原始链表数据，后续操作cur即可，不会影响head

需要返回整个链表的题型常见的处理：
1、重新构建链表并返回头节点：
ListNode dummyHead = new ListNode();
ListNode cur = dummyHead; // cur指向的是dummyHead的首指针
while (xxx) {
    cur.next = new ListNode(x);
    cur = cur.next;
}
return dummyHead.next;

2、操作原始链表返回头节点：
ListNode head; // 原始链表
ListNode dummyHead = new ListNode();
dummyHead.next = head;
ListNode p = dummyHead;

// 操作链表p，p可能会经历遍历操作指向到尾节点
...

return dummyHead.next; // dummyHead还是在链表头

四、必练题目
1、classic包下经典题型
2、
