package dp;

/**
 * 70.爬楼梯方法数：
 *
 * 假设你正在爬楼梯。需要 n阶你才能到达楼顶。
 *
 * 每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？
 *
 * 注意：给定 n 是一个正整数。
 *
 * 示例 1：
 *
 * 输入： 2
 * 输出： 2
 * 解释： 有两种方法可以爬到楼顶。
 * 1.  1 阶 + 1 阶
 * 2.  2 阶
 *
 * 示例 2：
 *
 * 输入： 3
 * 输出： 3
 * 解释： 有三种方法可以爬到楼顶。
 * 1.  1 阶 + 1 阶 + 1 阶
 * 2.  1 阶 + 2 阶
 * 3.  2 阶 + 1 阶
 */
public class ClimbStairs {

    /**
     * 1、确定 dp 数组及下标 i 的含义
     * dp[i]：爬到第 i 层楼梯，有 dp[i] 种方法
     *
     * 2、确定递推公式
     * 从 dp[i] 的定义可以看出，dp[i] 可以有两个方向推导出来
     * 上 i-1 层楼梯，有 dp[i-1] 种方法，再一步跳一个台阶到第 i 层就是 dp[i]
     * 上 i-2 层楼梯，有 dp[i-1] 种方法，再一步跳两个台阶到第 i 层就是 dp[i]
     * 那么 dp[i] 就是 dp[i-1] 与 dp[i-2] 之和，dp[i] = dp[i-1] + dp[i-2]
     *
     * 3、确定 dp 数组初始化
     * 上面说到 dp[i] 的含义，i 表示的到达的楼梯层数，dp[i] 表示爬到第 i 层楼梯的方法数
     * 那么 i=0 时，dp[i] 应该是多少？爬第 0 层从 dp 数组的定义角度上 dp[0]=0 是说得通的，但是题目中有提及：n 是一个正整数，题目根本没说 n 有为 0 的情况
     * 所以本题就不应该讨论 dp[0] 的初始化！
     * 所以不考虑 dp[0] 初始化的情况，dp[1]=1，dp[2]=2，然后从 i=3 开始递推，这样才符合 dp[i] 的定义
     *
     * 4、确定遍历顺序
     * 从递推公式 dp[i] = dp[i-1] + dp[i-2] 可以看出，遍历顺序是从前到后遍历
     *
     * 6、举例推导 dp 数组
     * 当 n=5 时，dp 数组如下：
     * 下标：  1  2  3  4  5
     * dp[i]：1  2  3  5  8
     * 如果代码出问题了，就把 dp 数组打印出来看是不是和自己推导的一样
     *
     * 可以发现，这道题目就是斐波那契数{@link Fib}，唯一区别是没有讨论 dp[0] 的情况，因为没有意义
     *
     * T:O(n)
     * S:O(n)
     */
    public int climbStairs(int n) {
        if (n <= 1) return n;

        int[] dp = new int[n + 1];
        dp[1] = 1;
        dp[2] = 2;
        for (int i = 3; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        return dp[n];
    }
}
