package dp;

/**
 * 509.斐波那契数
 *
 * 斐波那契数，通常用F(n) 表示，形成的序列称为 斐波那契数列 。该数列由0 和 1 开始，后面的每一项数字都是前面两项数字的和。也就是：
 *
 * F(0) = 0，F(1)= 1
 * F(n) = F(n - 1) + F(n - 2)，其中 n > 1
 * 给你 n ，请计算 F(n) 。
 *
 * 示例 1：
 *
 * 输入：2
 * 输出：1
 * 解释：F(2) = F(1) + F(0) = 1 + 0 = 1
 *
 * 示例 2：
 *
 * 输入：3
 * 输出：2
 * 解释：F(3) = F(2) + F(1) = 1 + 1 = 2
 *
 * 示例 3：
 *
 * 输入：4
 * 输出：3
 * 解释：F(4) = F(3) + F(2) = 2 + 1 = 3
 *
 * 提示：
 *
 * 0 <= n <= 30
 */
public class Fib {

    /**
     * 1、确定 dp 数组以及下标 i 的含义
     * dp[i] 的定义为：第 i 个数的斐波那契数值是 dp[i]
     *
     * 2、确定递推公式
     * 题目已经把递推公式直接给我们了：状态转移公式 dp[i] = dp[i-1] + dp[i-2]
     *
     * 3、确定 dp 数组初始化
     * 题目同样把初始化直接给我们了：dp[0] = 0, dp[1] = 1
     *
     * 4、确定遍历顺序
     * 从递推公式 dp[i] = dp[i-1] + dp[i-2] 可以看出，dp[i] 是依赖 dp[i-1] 和 dp[i-2]，所以遍历顺序是从前到后遍历
     *
     * 5、举例推导 dp 数组
     * 按照递推公式 dp[i] = dp[i-1] + dp[i-2]，当 n = 10，dp 数组是如下数列：
     * 0 1 1 2 3 5 8 13 21 34 55
     * 如果代码写出来发现结果不对，就把 dp 数组打印出来看看和推导的数列是不是一致的
     *
     * T:O(n)
     * S:O(n)
     */
    public int fib(int n) {
        if (n <= 1) return n;

        int[] dp = new int[n + 1];
        dp[0] = 0;
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        return dp[n];
    }

    /**
     * 空间复杂度优化，一般面试的时候用方式1即可更直观，面试官有要求空间优化的时候再按这种方式
     *
     * T:O(n)
     * S:O(1)
     */
    public int fib2(int n) {
        if (n <= 1) return n;
        int[] dp = new int[2]; // 只需要维护两个数值即可
        dp[0] = 0;
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            int sum = dp[0] + dp[1];
            dp[0] = dp[1];
            dp[1] = sum;
        }
        return dp[1];
    }

    public int fib3(int n) {
        if (n <= 1) return n;
        int a = 0;
        int b = 1;
        int c = 0;
        for (int i = 2; i <= n; i++) {
            c = a + b;
            a = b;
            b = c;
        }
        return c;
    }
}
