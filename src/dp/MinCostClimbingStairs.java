package dp;

/**
 * 746.使用最小花费爬楼梯
 *
 * 数组的每个下标作为一个阶梯，第 i 个阶梯对应着一个非负数的体力花费值cost[i]（下标从 0 开始）。
 *
 * 每当你爬上一个阶梯你都要花费对应的体力值，一旦支付了相应的体力值，你就可以选择向上爬一个阶梯或者爬两个阶梯。
 *
 * 请你找出达到楼层顶部的最低花费。在开始时，你可以选择从下标为 0 或 1 的元素作为初始阶梯。
 *
 * 示例1：
 *
 * 输入：cost = [10, 15, 20]
 * 输出：15
 * 解释：最低花费是从 cost[1] 开始，然后走两步即可到阶梯顶，一共花费 15 。
 *
 * 示例 2：
 *
 * 输入：cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]
 * 输出：6
 * 解释：最低花费方式是从 cost[0] 开始，逐个经过那些 1 ，跳过 cost[3] ，一共花费 6 。
 *
 * 提示：
 *
 * cost的长度范围是 [2, 1000]。
 * cost[i] 将会是一个整型数据，范围为[0, 999] 。
 */
public class MinCostClimbingStairs {

    /**
     * 1、确定 dp 数组及下标 i 的含义
     * dp[i] 的定义：到达第 i 个台阶所花费的最少体力为 dp[i]（注意这里认为第一步一定是要花费的）
     *
     * 2、确定递推公式
     * 可以有两个途径得到 dp[i]，一个是 dp[i-1]，一个是 dp[i-2]，究竟选 dp[i-1] 还是 dp[i-2] 呢？
     * 一定是选最小的，所以 dp[i] = min(dp[i-1], dp[i-2])+cost[i]
     * 注意这里为什么是加 cost[i]，而不是 cost[i-1]、cost[i-2] 之类的，因为题目中说了：每当爬上一个阶梯都要花费对应的体力值
     *
     * 3、确定 dp 数组初始化
     * 根据递推公式 dp[i] 由 dp[i-1] 和 dp[i-2] 推出，既然初始化所有的 dp[i] 是不可能的，那么只初始化 dp[0] 和 dp[1] 就够了，其他的都由它们推出
     * dp[0] = cost[0]
     * dp[1] = cost[1]
     *
     * 4、确定遍历顺序
     * 根据递推公式 dp[i] 由 dp[i-1] 和 dp[i-2] 推出，可以看出是从前到后遍历 cost 数组
     *
     * 5、举例推导 dp 数组
     * 以 cost=[1, 100, 1, 1, 1, 100, 1, 1, 100, 1] 举例模拟 dp 数组的状态变化：
     * 下标：  0  1  2  3  4  5  6  7 |  8  9 |
     * dp[i]：1 100 2  3  3 103 4  5 | 104 6 |
     *                             最后两位取最小值
     *
     * T:O(n)
     * S:O(n)
     */
    public int minCostClimbingStairs(int[] cost) {
        int[] dp = new int[cost.length];
        dp[0] = cost[0];
        dp[1] = cost[1];
        for (int i = 2; i < cost.length; i++) {
            dp[i] = Math.min(dp[i - 1], dp[i - 2]) + cost[i];
        }
        // 注意最后一步颗粒理解为不用花费，所以取倒数第一步和第二步的最小值
        return Math.min(dp[cost.length - 1], dp[cost.length - 2]);
    }
}
