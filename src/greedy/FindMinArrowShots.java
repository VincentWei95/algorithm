package greedy;

import java.util.Arrays;
import java.util.Comparator;

/**
 * 452.用最少数量的箭引爆气球
 *
 * 在二维空间中有许多球形的气球。对于每个气球，提供的输入是水平方向上，气球直径的开始和结束坐标。由于它是水平的，所以纵坐标并不重要，因此只要知道开始和结束的横坐标就足够了。开始坐标总是小于结束坐标。
 *
 * 一支弓箭可以沿着 x 轴从不同点完全垂直地射出。在坐标 x 处射出一支箭，若有一个气球的直径的开始和结束坐标为 xstart，xend， 且满足 xstart≤ x ≤ xend，则该气球会被引爆。可以射出的弓箭的数量没有限制。 弓箭一旦被射出之后，可以无限地前进。我们想找到使得所有气球全部被引爆，所需的弓箭的最小数量。
 *
 * 给你一个数组 points ，其中 points [i] = [xstart,xend] ，返回引爆所有气球所必须射出的最小弓箭数。
 *
 * 示例 1：
 *
 * 输入：points = [[10,16],[2,8],[1,6],[7,12]]
 * 输出：2
 * 解释：对于该样例，x = 6 可以射爆 [2,8],[1,6] 两个气球，以及 x = 11 射爆另外两个气球
 *
 * 示例 2：
 *
 * 输入：points = [[1,2],[3,4],[5,6],[7,8]]
 * 输出：4
 *
 * 示例 3：
 *
 * 输入：points = [[1,2],[2,3],[3,4],[4,5]]
 * 输出：2
 *
 * 示例 4：
 *
 * 输入：points = [[1,2]]
 * 输出：1
 *
 * 示例 5：
 *
 * 输入：points = [[2,3],[2,3]]
 * 输出：1
 */
public class FindMinArrowShots {

    /**
     * 思路：
     * 如何使用最少的弓箭呢？
     * 直觉上来看，貌似只射重叠最多的气球，用的弓箭一定最少，那么有没有当前重叠了三个气球，我射两个，留一个和后面的一起射这样弓箭用的更少的情况呢？
     * 尝试举一下反例，发现没有这种情况，那么就试一试贪心吧！
     *
     * 局部最优：当气球出现重叠时一起射，所用弓箭最少
     * 全局最优：把所有气球射爆所用弓箭最少
     *
     * 算法确定下来了，那么如何模拟气球射爆的过程呢？
     * 如果把气球排序之后，从前向后遍历气球，被射过的气球仅仅跳过就行了，只要记录一下箭的数量就可以了
     *
     * 为了让气球尽可能的重叠，需要对数组进行排序
     * 那么按照气球起始位置排序，还是按照终止位置排序呢？其实都可以，只不过对应的遍历顺序不同，这里按照气球的起始位置排序
     * 按照起始位置排序，那么就从前到后遍历气球数组，靠左尽可能让气球重复
     * 如果遇到气球重叠了，重叠气球中右边界的最小值之前的区间一定需要一个弓箭
     *
     * [[10,16],[2,8],[1,6],[7,12]]
     *
     * 1            6
     * ----气球1-----
     *              |   <-----重叠气球最小右边界
     *   2          |  8
     *   -----气球2-----
     *
     *              7            12
     *              -----气球3-----
     *                            |   <-----下一组重叠气球最小右边界
     *                  10        |  16
     *                  -----气球4-----
     *
     * T:O(nlogn) 因为有一个快排
     * S:O(1)
     */
    public int findMinArrowShots(int[][] points) {
        if (points.length == 0) return 0;

        // 按起始位置排序
        Arrays.sort(points, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                return Integer.compare(o1[0], o2[0]);
            }
        });

        int count = 1; // 有气球至少需要一支箭
        for (int i = 1; i < points.length; i++) {
            // 当前气球的起始位置 > 上一个气球的结束位置
            // 气球 i 和 气球 i-1 不挨着，注意这里不是 >=
            // 因为 >= 说明两个气球挨在一起不重叠也可以射爆
            if (points[i][0] > points[i - 1][1]) {
                count++; // 需要一支箭
            } else {
                // 气球 i 和 气球 i-1 挨着，更新重叠气球最小右边界
                points[i][1] = Math.min(points[i][1], points[i - 1][1]);
            }
        }
        return count;
    }
}
