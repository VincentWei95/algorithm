package greedy;

import java.util.Arrays;
import java.util.Comparator;
import java.util.LinkedList;

/**
 * 406.根据身高重建队列
 *
 * 假设有打乱顺序的一群人站成一个队列，数组 people 表示队列中一些人的属性（不一定按顺序）。每个 people[i] = [hi, ki] 表示第 i 个人的身高为 hi ，前面 正好 有 ki 个身高大于或等于 hi 的人。
 *
 * 请你重新构造并返回输入数组people 所表示的队列。返回的队列应该格式化为数组 queue ，其中 queue[j] = [hj, kj] 是队列中第 j 个人的属性（queue[0] 是排在队列前面的人）。
 *
 * 示例 1：
 *
 * 输入：people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
 * 输出：[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]
 * 解释：
 * 编号为 0 的人身高为 5 ，没有身高更高或者相同的人排在他前面。
 * 编号为 1 的人身高为 7 ，没有身高更高或者相同的人排在他前面。
 * 编号为 2 的人身高为 5 ，有 2 个身高更高或者相同的人排在他前面，即编号为 0 和 1 的人。
 * 编号为 3 的人身高为 6 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。
 * 编号为 4 的人身高为 4 ，有 4 个身高更高或者相同的人排在他前面，即编号为 0、1、2、3 的人。
 * 编号为 5 的人身高为 7 ，有 1 个身高更高或者相同的人排在他前面，即编号为 1 的人。
 * 因此 [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] 是重新构造后的队列。
 *
 * 示例 2：
 *
 * 输入：people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]
 * 输出：[[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]
 *
 * 提示：题目数据确保队列可以被重建
 */
public class ReconstructQueue {

    /**
     * 思路：
     * 本题有两个维度h和k，看到这种题目一定要想如何确定一个维度，然后再按照另一个维度重新排列。如果两个维度一起考虑一定会顾此失彼
     * 对于本题困惑的点是先确定k还是先确定h呢，也就是究竟先按h排序，还是按k排序
     * 如果按照k来从小到大排序，排完之后，会发现k的排列并不符合条件，身高也不符合条件，两个维度哪一个都没确定下来：
     *
     * 按k从小到大排序：
     * 原数据：
     * [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
     * 排序后结果：
     * [[7,0],[5,0],[7,1],[6,1],[5,2],[4,4]]
     *
     * 那么按照身高h排序呢，身高一定是从大到小排（身高相同的话则k小的站前面），让高个子在前面
     *
     * 按h从大到小排序：
     * 原数据：
     * [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
     * 排序后结果：
     * [[7,0],[7,1],[6,1],[5,0],[5,2],[4,4]]
     *
     * 此时我们可以确定一个维度了，就是身高，前面的节点一定都比本节点高。那么只需要按照k为下标重新插入队列就可以了，为什么呢？
     *
     * [[7,0],[7,1],[6,1],[5,0],[5,2],[4,4]]
     *
     *          <------------------
     *      [5,2]前面一定都比[5,2]高，那么[5,2]可以放心插入下标为2的位置
     *      这样就确定了[5,2]前面一定有两个比它高的元素
     *
     * 按照身高排序之后，优先按身高高的 people 的 k 来插入，后序插入节点也不会影响前面已经插入的节点，最终按照 k 的规则完成了队列
     * 所以在按照身高从大到小排序后：
     * 局部最优：优先按身高高的 people 的 k 来插入。插入操作过后的 people 满足队列属性
     * 全局最优：最后都做完插入操作，整个队列满足题目队列属性
     *
     * 按身高排序后，按 k 作为索引从小到大插入：
     * [[7,0],[7,1],[6,1],[5,0],[5,2],[4,4]]
     * 1、
     * 插入[7,0]
     * 队列：[[7,0]]
     *
     * 2、
     * 插入[7,1]
     * 队列：[[7,0],[7,1]]
     *
     * 3、
     * 插入[6,1]
     * 队列：[[7,0],[6,1],[7,1]]
     *
     * 4、
     * 插入[5,0]
     * 队列：[[5,0],[7,0],[6,1],[7,1]]
     *
     * 5、
     * 插入[5,2]
     * 队列：[[5,0],[7,0],[5,2],[6,1],[7,1]]
     *
     * 6、
     * 插入[4,4]
     * 队列：[[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]
     */
    public int[][] reconstructQueue(int[][] people) {
        // 按身高h从大到小排序
        Arrays.sort(people, new Comparator<int[]>() {
            @Override
            public int compare(int[] o1, int[] o2) {
                // 如果身高相同，按k从小到大排序
                if (o1[0] == o2[0]) {
                    return o1[1] - o2[1];
                }
                return o2[0] - o1[0];
            }
        });
        LinkedList<int[]> queue = new LinkedList<>();
        for (int[] p : people) {
            queue.add(p[1], p); // 根据 k 为索引从小到大插入队列
        }
        return queue.toArray(new int[people.length][]);
    }
}
