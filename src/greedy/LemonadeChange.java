package greedy;

/**
 * 860.柠檬水找零
 *
 * 在柠檬水摊上，每一杯柠檬水的售价为5美元。顾客排队购买你的产品，（按账单 bills 支付的顺序）一次购买一杯。
 *
 * 每位顾客只买一杯柠檬水，然后向你付 5 美元、10 美元或 20 美元。你必须给每个顾客正确找零，也就是说净交易是每位顾客向你支付 5 美元。
 *
 * 注意，一开始你手头没有任何零钱。
 *
 * 给你一个整数数组 bills ，其中 bills[i] 是第 i 位顾客付的账。如果你能给每位顾客正确找零，返回true，否则返回 false。
 *
 * 示例 1：
 *
 * 输入：bills = [5,5,5,10,20]
 * 输出：true
 * 解释：
 * 前 3 位顾客那里，我们按顺序收取 3 张 5 美元的钞票。
 * 第 4 位顾客那里，我们收取一张 10 美元的钞票，并返还 5 美元。
 * 第 5 位顾客那里，我们找还一张 10 美元的钞票和一张 5 美元的钞票。
 * 由于所有客户都得到了正确的找零，所以我们输出 true。
 *
 * 示例 2：
 *
 * 输入：bills = [5,5,10,10,20]
 * 输出：false
 * 解释：
 * 前 2 位顾客那里，我们按顺序收取 2 张 5 美元的钞票。
 * 对于接下来的 2 位顾客，我们收取一张 10 美元的钞票，然后返还 5 美元。
 * 对于最后一位顾客，我们无法退回 15 美元，因为我们现在只有两张 10 美元的钞票。
 * 由于不是每位顾客都得到了正确的找零，所以答案是 false。
 *
 * 示例 3：
 *
 * 输入：bills = [5,5,10]
 * 输出：true
 *
 * 示例 4：
 *
 * 输入：bills = [10,10]
 * 输出：false
 *
 * 提示：
 *
 * bills[i]不是5就是10或是20
 */
public class LemonadeChange {

    /**
     * 思路：
     * 这道题目刚一看，可能会有点懵，这要怎么找零才能保证完整全部账单的找零呢？
     * 但仔细一琢磨就会发现，可供我们做判断的空间非常少！
     * 只需要维护三种金额的数量，5、10和20
     * 有如下三种情况：
     * 1、账单是5，直接收下
     * 2、账单是10，消耗一个5，增加一个10
     * 3、账单是20，优先消耗一个10和一个5，如果不够，再消耗三个5
     *
     * 情况一和二都是固定策略，唯一不确定的是情况三，情况三这里是有贪心的
     * 账单是20的情况，为什么要优先消耗一个10和一个5呢？
     * 因为美元10只能给账单20找零，而美元5可以给账单10和账单20找零，美元5更万能！
     *
     * 局部最优：遇到账单20，，优先消耗美元10，完成本次找零
     * 全局最优：完成全部账单找零
     * 局部最优可以推出全局最优，并找不出反例，试试贪心算法
     */
    public boolean lemonadeChange(int[] bills) {
        int cash5 = 0;
        int cash10 = 0;
        for (int bill : bills) {
            if (bill == 5) {
                cash5++;
            } else if (bill == 10) {
                // 没有足够的美元5找零
                if (cash5 <= 0) return false;

                cash5--;
                cash10++;
            } else {
                // 有美元10和美元5，优先使用它们找零
                if (cash10 > 0 && cash5 > 0) {
                    cash10--;
                    cash5--;
                } else if (cash5 >= 3) {
                    cash5 -= 3;
                } else {
                    return false;
                }
            }
        }
        return true;
    }
}
